{"version":3,"file":"rectangle.js","sources":["../src/rectangle.js"],"names":["scope","Rectangle","props","prop","this","prototype","x","y","width","height","contains","another","intersects","getSlotsAround","what","slots","thisRight","thisBottom","whatRight","whatBottom","push","canFit","buffer","window"],"mappings":"CAAA,SAAYA,GACZ,YAUA,SAASC,GAAWC,GAClB,IAAM,GAAIC,KAAQD,GAChBE,KAAMD,GAASD,EAAOC,GAG1BF,EAAUI,UAAUC,EAAI,EACxBL,EAAUI,UAAUE,EAAI,EACxBN,EAAUI,UAAUG,MAAQ,EAC5BP,EAAUI,UAAUI,OAAS,EAQ7BR,EAAUI,UAAUK,SAAW,SAAUC,GACvC,MAAOP,MAAKE,GAAKK,EAAQL,GACvBF,KAAKG,GAAKI,EAAQJ,GAClBH,KAAKE,EAAIF,KAAKI,OAASG,EAAQL,GAAKK,EAAQH,OAAS,IACrDJ,KAAKG,EAAIH,KAAKK,QAAUE,EAAQJ,GAAKI,EAAQF,QAAU,IAS3DR,EAAUI,UAAUO,WAAa,SAAUD,GACzC,MAAOP,MAAKE,EAAIK,EAAQL,EAAIK,EAAQH,OAClCJ,KAAKE,EAAIF,KAAKI,MAAQG,EAAQL,GAC9BF,KAAKG,EAAII,EAAQJ,EAAII,EAAQF,QAC7BL,KAAKG,EAAIH,KAAKK,OAASE,EAAQJ,GAQnCN,EAAUI,UAAUQ,eAAiB,SAAUC,GAG7C,IAAMV,KAAKQ,WAAYE,GACrB,OAAO,CAGT,IAAIC,MACAC,EAAaZ,KAAKE,EAAIF,KAAKI,MAC3BS,EAAab,KAAKG,EAAIH,KAAKK,OAC3BS,EAAaJ,EAAKR,EAAIQ,EAAKN,MAC3BW,EAAaL,EAAKP,EAAIO,EAAKL,MAkD/B,OA/CKL,MAAKG,EAAIO,EAAKP,GACjBQ,EAAMK,KACJ,GAAInB,IACFK,EAAGF,KAAKE,EACRC,EAAGH,KAAKG,EACRC,MAAOJ,KAAKI,MACZC,OAAQK,EAAKP,EAAIH,KAAKG,KAMvBS,EAAYE,GACfH,EAAMK,KACJ,GAAInB,IACFK,EAAGY,EACHX,EAAGH,KAAKG,EACRC,MAAOQ,EAAYE,EACnBT,OAAQL,KAAKK,UAMdQ,EAAaE,GAChBJ,EAAMK,KACJ,GAAInB,IACFK,EAAGF,KAAKE,EACRC,EAAGY,EACHX,MAAOJ,KAAKI,MACZC,OAAQQ,EAAaE,KAMtBf,KAAKE,EAAIQ,EAAKR,GACjBS,EAAMK,KACJ,GAAInB,IACFK,EAAGF,KAAKE,EACRC,EAAGH,KAAKG,EACRC,MAAOM,EAAKR,EAAIF,KAAKE,EACrBG,OAAQL,KAAKK,UAKZM,GASTd,EAAUI,UAAUgB,OAAS,SAAUP,EAAMQ,GAE3C,MADAA,KAAWA,EAAS,GACblB,KAAKI,OAASc,EAASR,EAAKN,OAASJ,KAAKK,QAAUa,EAASR,EAAKL,QAK3ET,EAAMC,UAAYA,GAEdsB","sourcesContent":["( function( scope ) {\n\"use strict\";\n\n/**\n * [Rectangle description]\n * @param {Object} [props] rectangle properties\n * @param {Number} [props.x=0] rectangle position\n * @param {Number} [props.y=0] rectangle position\n * @param {Number} [props.width=0] rectangle width\n * @param {Number} [props.height0] rectangle height\n */\nfunction Rectangle( props ) {\n  for ( var prop in props ) {\n    this[ prop ] = props[ prop ];\n  }\n}\nRectangle.prototype.x = 0;\nRectangle.prototype.y = 0;\nRectangle.prototype.width = 0;\nRectangle.prototype.height = 0;\n\n/**\n * Does this rectangle contains another (entire) rectangle or point.\n * `this` &supe; `another`\n * @param {Rectangle} rect\n * @returns {Boolean}\n**/\nRectangle.prototype.contains = function( another ) {\n  return this.x <= another.x &&\n    this.y <= another.y &&\n    this.x + this.width >= another.x + (another.width || 0) &&\n    this.y + this.height >= another.y + (another.height || 0);\n};\n\n/**\n * Does this rectangle intersects with another?\n * `this` &cap; `another` &ne; &empty;\n * @param {Rectangle} another\n * @returns {Boolean}\n**/\nRectangle.prototype.intersects = function( another ) {\n  return this.x < another.x + another.width && // this left end < another's right\n    this.x + this.width > another.x && // this right end > another's left\n    this.y < another.y + another.height && // this top end < another's bottom\n    this.y + this.height > another.y; // this bottom end > another's top\n};\n\n/**\n * @param {Rectangle} what - the overlapping rectangle\n * @returns {Array<Rectangle>} slots - free slots (rectangles) around the `what`\n * @todo  write tests, esspecialy for bigger ones (tomalec)\n**/\nRectangle.prototype.getSlotsAround = function( what ) {\n\n  // if no intersection, return false\n  if ( !this.intersects( what ) ) {\n    return false;\n  }\n\n  var slots = [],\n      thisRight  = this.x + this.width,\n      thisBottom = this.y + this.height,\n      whatRight  = what.x + what.width,\n      whatBottom = what.y + what.height;\n\n  // top\n  if ( this.y < what.y ) {\n    slots.push(\n      new Rectangle({\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: what.y - this.y\n      })\n    );\n  }\n\n  // right\n  if ( thisRight > whatRight ) {\n    slots.push(\n      new Rectangle({\n        x: whatRight,\n        y: this.y,\n        width: thisRight - whatRight,\n        height: this.height\n      })\n    );\n  }\n\n  // bottom\n  if ( thisBottom > whatBottom ) {\n    slots.push(\n      new Rectangle({\n        x: this.x,\n        y: whatBottom,\n        width: this.width,\n        height: thisBottom - whatBottom\n      })\n    );\n  }\n\n  // left\n  if ( this.x < what.x ) {\n    slots.push(\n      new Rectangle({\n        x: this.x,\n        y: this.y,\n        width: what.x - this.x,\n        height: this.height\n      })\n    );\n  }\n\n  return slots;\n};\n/**\n * Can `what` rectangle fit inside ours, with optional `buffer`space left (in both directions)?\n * @param  {Rectangle} what   ractangle to fit\n * @param  {Number} [buffer=0] amount of additional space required\n * @return {Boolean}\n * @TODO write tests for `buffer` (tomalec)\n */\nRectangle.prototype.canFit = function( what, buffer ) {\n  buffer || (buffer = 0);\n  return this.width >= buffer + what.width && this.height >= buffer + what.height;\n};\n\n\n// TODO: export\nscope.Rectangle = Rectangle;\n\n})( window );\n"]}