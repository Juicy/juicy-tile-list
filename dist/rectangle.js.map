{"version":3,"file":"rectangle.js","sources":["../src/rectangle.js"],"names":["scope","Rectangle","props","prop","this","prototype","x","y","width","height","contains","another","intersects","getSlotsAround","what","slots","thisRight","thisBottom","whatRight","whatBottom","push","canFit","buffer","window"],"mappings":"CAAA,SAAYA,GACZ,YAWA,SAASC,GAAWC,GAClB,IAAM,GAAIC,KAAQD,GAChBE,KAAMD,GAASD,EAAOC,GAG1BF,EAAUI,UAAUC,EAAI,EACxBL,EAAUI,UAAUE,EAAI,EACxBN,EAAUI,UAAUG,MAAQ,EAC5BP,EAAUI,UAAUI,OAAS,EAQ7BR,EAAUI,UAAUK,SAAW,SAAUC,GACvC,MAAOP,MAAKE,GAAKK,EAAQL,GACvBF,KAAKG,GAAKI,EAAQJ,GAClBH,KAAKE,EAAIF,KAAKI,OAASG,EAAQL,GAAKK,EAAQH,OAAS,IACrDJ,KAAKG,EAAIH,KAAKK,QAAUE,EAAQJ,GAAKI,EAAQF,QAAU,IAS3DR,EAAUI,UAAUO,WAAa,SAAUD,GACzC,MAAOP,MAAKE,EAAIK,EAAQL,EAAIK,EAAQH,OAClCJ,KAAKE,EAAIF,KAAKI,MAAQG,EAAQL,GAC9BF,KAAKG,EAAII,EAAQJ,EAAII,EAAQF,QAC7BL,KAAKG,EAAIH,KAAKK,OAASE,EAAQJ,GAQnCN,EAAUI,UAAUQ,eAAiB,SAAUC,GAG7C,IAAMV,KAAKQ,WAAYE,GACrB,OAAO,CAGT,IAAIC,MACAC,EAAaZ,KAAKE,EAAIF,KAAKI,MAC3BS,EAAab,KAAKG,EAAIH,KAAKK,OAC3BS,EAAaJ,EAAKR,EAAIQ,EAAKN,MAC3BW,EAAaL,EAAKP,EAAIO,EAAKL,MAkD/B,OA/CKL,MAAKG,EAAIO,EAAKP,GACjBQ,EAAMK,KACJ,GAAInB,IACFK,EAAGF,KAAKE,EACRC,EAAGH,KAAKG,EACRC,MAAOJ,KAAKI,MACZC,OAAQK,EAAKP,EAAIH,KAAKG,KAMvBS,EAAYE,GACfH,EAAMK,KACJ,GAAInB,IACFK,EAAGY,EACHX,EAAGH,KAAKG,EACRC,MAAOQ,EAAYE,EACnBT,OAAQL,KAAKK,UAMdQ,EAAaE,GAChBJ,EAAMK,KACJ,GAAInB,IACFK,EAAGF,KAAKE,EACRC,EAAGY,EACHX,MAAOJ,KAAKI,MACZC,OAAQQ,EAAaE,KAMtBf,KAAKE,EAAIQ,EAAKR,GACjBS,EAAMK,KACJ,GAAInB,IACFK,EAAGF,KAAKE,EACRC,EAAGH,KAAKG,EACRC,MAAOM,EAAKR,EAAIF,KAAKE,EACrBG,OAAQL,KAAKK,UAKZM,GASTd,EAAUI,UAAUgB,OAAS,SAAUP,EAAMQ,GAE3C,MADAA,KAAWA,EAAS,GACblB,KAAKI,OAASc,EAASR,EAAKN,OAASJ,KAAKK,QAAUa,EAASR,EAAKL,QAK3ET,EAAMC,UAAYA,GAEdsB","sourcesContent":["( function( scope ) {\r\n\"use strict\";\r\n\r\n/**\r\n * [Rectangle description]\r\n * version: 0.0.9\r\n * @param {Object} [props] rectangle properties\r\n * @param {Number} [props.x=0] rectangle position\r\n * @param {Number} [props.y=0] rectangle position\r\n * @param {Number} [props.width=0] rectangle width\r\n * @param {Number} [props.height0] rectangle height\r\n */\r\nfunction Rectangle( props ) {\r\n  for ( var prop in props ) {\r\n    this[ prop ] = props[ prop ];\r\n  }\r\n}\r\nRectangle.prototype.x = 0;\r\nRectangle.prototype.y = 0;\r\nRectangle.prototype.width = 0;\r\nRectangle.prototype.height = 0;\r\n\r\n/**\r\n * Does this rectangle contains another (entire) rectangle or point.\r\n * `this` &supe; `another`\r\n * @param {Rectangle} rect\r\n * @returns {Boolean}\r\n**/\r\nRectangle.prototype.contains = function( another ) {\r\n  return this.x <= another.x &&\r\n    this.y <= another.y &&\r\n    this.x + this.width >= another.x + (another.width || 0) &&\r\n    this.y + this.height >= another.y + (another.height || 0);\r\n};\r\n\r\n/**\r\n * Does this rectangle intersects with another?\r\n * `this` &cap; `another` &ne; &empty;\r\n * @param {Rectangle} another\r\n * @returns {Boolean}\r\n**/\r\nRectangle.prototype.intersects = function( another ) {\r\n  return this.x < another.x + another.width && // this left end < another's right\r\n    this.x + this.width > another.x && // this right end > another's left\r\n    this.y < another.y + another.height && // this top end < another's bottom\r\n    this.y + this.height > another.y; // this bottom end > another's top\r\n};\r\n\r\n/**\r\n * @param {Rectangle} what - the overlapping rectangle\r\n * @returns {Array<Rectangle>} slots - free slots (rectangles) around the `what`\r\n * @todo  write tests, esspecialy for bigger ones (tomalec)\r\n**/\r\nRectangle.prototype.getSlotsAround = function( what ) {\r\n\r\n  // if no intersection, return false\r\n  if ( !this.intersects( what ) ) {\r\n    return false;\r\n  }\r\n\r\n  var slots = [],\r\n      thisRight  = this.x + this.width,\r\n      thisBottom = this.y + this.height,\r\n      whatRight  = what.x + what.width,\r\n      whatBottom = what.y + what.height;\r\n\r\n  // top\r\n  if ( this.y < what.y ) {\r\n    slots.push(\r\n      new Rectangle({\r\n        x: this.x,\r\n        y: this.y,\r\n        width: this.width,\r\n        height: what.y - this.y\r\n      })\r\n    );\r\n  }\r\n\r\n  // right\r\n  if ( thisRight > whatRight ) {\r\n    slots.push(\r\n      new Rectangle({\r\n        x: whatRight,\r\n        y: this.y,\r\n        width: thisRight - whatRight,\r\n        height: this.height\r\n      })\r\n    );\r\n  }\r\n\r\n  // bottom\r\n  if ( thisBottom > whatBottom ) {\r\n    slots.push(\r\n      new Rectangle({\r\n        x: this.x,\r\n        y: whatBottom,\r\n        width: this.width,\r\n        height: thisBottom - whatBottom\r\n      })\r\n    );\r\n  }\r\n\r\n  // left\r\n  if ( this.x < what.x ) {\r\n    slots.push(\r\n      new Rectangle({\r\n        x: this.x,\r\n        y: this.y,\r\n        width: what.x - this.x,\r\n        height: this.height\r\n      })\r\n    );\r\n  }\r\n\r\n  return slots;\r\n};\r\n/**\r\n * Can `what` rectangle fit inside ours, with optional `buffer`space left (in both directions)?\r\n * @param  {Rectangle} what   ractangle to fit\r\n * @param  {Number} [buffer=0] amount of additional space required\r\n * @return {Boolean}\r\n * @TODO write tests for `buffer` (tomalec)\r\n */\r\nRectangle.prototype.canFit = function( what, buffer ) {\r\n  buffer || (buffer = 0);\r\n  return this.width >= buffer + what.width && this.height >= buffer + what.height;\r\n};\r\n\r\n\r\n// TODO: export\r\nscope.Rectangle = Rectangle;\r\n\r\n})( window );\r\n"]}