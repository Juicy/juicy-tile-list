{"version":3,"file":"package.js","sources":["../src/package.js"],"names":["scope","Packer","parseSetup","setup","container","allItems","id","currentContainer","sNo","Object","defineProperty","value","writable","sLen","items","length","itemSetup","getMinimumPriority","arr","min","i","ilen","priority","Package","this","direction","gutter","root","prototype","packItems","that","packer","sort","sorter","map","hidden","rect","Rectangle","width","widthAuto","indexOf","parseFloat","height","heightAuto","add","minHeight","minWidth","reprioritizeItem","item","increase","end","higher","lower","collection","RangeError","sortedIndex","resizeItem","moveToContainer","what","where","noPacking","from","to","splice","push","deleteContainer","noRepacking","undefined","siblingsList","itemNo","removed","generatePackageName","createNewContainer","inContainer","rectangle","siblings","window"],"mappings":"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","sourcesContent":["/**\r\n * Package\r\n * version: 0.0.9\r\n */\r\n(function( scope, Packer ){\r\n\"use strict\";\r\n\r\n/**\r\n * Extend JSON setup, with circular references to items' containers.\r\n * Creates an array of all items and virtual containers, \r\n * that maps to nodes in setup tree.\r\n * Applies default container id.\r\n * @param {Object} setup packer setup\r\n * @param {Item} [container] parent node\r\n * @param {Object} [allItems={}] map of items to update\r\n * @returns {Array} array of updated/created items\r\n */\r\nfunction parseSetup( setup, container, allItems ){\r\n    allItems = allItems || {};\r\n    var id, currentContainer;\r\n    if( !container ){\r\n      id = setup.id = \"root\";\r\n      container = null;\r\n    } else {\r\n      id = setup.id || ( (container && container.id) + \"_\" + sNo );\r\n      // FIXME i'm ugly\r\n      setup.id = id;\r\n    }\r\n    // create item for current container\r\n    allItems[ id ] = currentContainer = setup;\r\n    Object.defineProperty(setup, \"container\", {value: container, writable: true});\r\n\r\n    // create allItems list\r\n    for(var sNo = 0, sLen = setup.items.length; sNo < sLen; sNo++) {\r\n      var itemSetup = setup.items[sNo];\r\n\r\n      // walk the tree recursively\r\n      if(itemSetup.items){\r\n        // FIXME I'm ugly\r\n        // create default id\r\n        if(!itemSetup.id){\r\n          itemSetup.id = ( currentContainer.id + \"_\" + sNo );\r\n        }\r\n        parseSetup( itemSetup, currentContainer, allItems );\r\n      } else {\r\n        // TODO: make index/id not mandatory (tomalec)\r\n        allItems[ itemSetup.id ] = itemSetup;\r\n        Object.defineProperty(itemSetup, \"container\", {value: currentContainer, writable: true });\r\n      }\r\n    }\r\n    return allItems;\r\n}\r\n /**\r\n * Returns the minimum value of the priority property from the given array of objects\r\n * @param {Array<Object>} arr\r\n * @return {Number} number in range from 0 to 1\r\n * @TODO DRY\r\n */\r\nfunction getMinimumPriority(arr) {\r\n  var min = 1;\r\n  for (var i = 0, ilen = arr.length; i < ilen; i++) {\r\n    if (arr[i].priority < min) {\r\n      min = arr[i].priority;\r\n    }\r\n  }\r\n  if (min < 0) {\r\n    min = 0;\r\n  }\r\n  return min;\r\n}\r\n\r\n/**\r\n * [Package description]\r\n * @param {Object} [setup] packer setup (*Warning*: object will be modified!)\r\n * @IDEA remove this.items (tomalec)\r\n */\r\nfunction Package( setup ){\r\n  if(setup){\r\n    this.setup = setup;\r\n    // XXX: this is used only by layer above (juicy-tile-list to match with elements)\r\n    this.allItems = parseSetup( setup );\r\n  }else{\r\n    this.setup = {\r\n      id: \"root\",\r\n      direction: \"rightDown\",\r\n      gutter: 0,\r\n      items: []\r\n    };\r\n    this.allItems = {root: this.setup};\r\n  }\r\n}\r\nPackage.prototype.allItems = null;\r\nPackage.prototype.setup = null;\r\n\r\n\r\nPackage.prototype.direction = \"rightDown\";\r\n\r\n/**\r\n * [packItems description]\r\n * @param {Object} setup setup of items fo pack, if not give `#setup` will be used\r\n */\r\nPackage.prototype.packItems = function packItems( setup ) {\r\n  setup || (setup = this.setup);\r\n  var that = this,\r\n      packer = new Packer(setup);\r\n\r\n  //pack rectangles, and calculate container size\r\n  packer.items = setup.items\r\n    .sort(this.sorter) // sort- if neded\r\n    .map(function(itemSetup){\r\n      if(itemSetup.hidden){\r\n        return itemSetup;\r\n      }\r\n      // TODO: do it more lightweight\r\n      var rect = new Rectangle(itemSetup);\r\n\r\n      //first calculate rect width because it cannot be auto TODO: fix for downRight mode\r\n      if( !rect.widthAuto && typeof rect.width == \"string\" && rect.width.indexOf(\"%\") > 0 ){\r\n        rect.width = ( (setup.width + setup.gutter) * parseFloat(rect.width) /100  - setup.gutter);\r\n      } else {\r\n        rect.width = parseFloat( rect.width );\r\n      }\r\n      // caluclate relative size\r\n      // we cannot use calc(xx% - gutter px) as it can be in virtual container which is a sibling\r\n      if( !rect.heightAuto && typeof rect.height == \"string\" && rect.height.indexOf(\"%\") > 0 ){\r\n        rect.height = ( (setup.height + setup.gutter) * parseFloat(rect.height) /100 - setup.gutter );\r\n      } else {\r\n        rect.height = parseFloat( rect.height );\r\n      }\r\n\r\n      \r\n      if (itemSetup.items ) { // container\r\n        // pack its items first, to figureout minSize\r\n        rect = that.packItems(\r\n          rect // use caculated width and height\r\n        );\r\n\r\n      }\r\n\r\n      // Pack item\r\n      packer.add(rect);\r\n\r\n      return rect;\r\n  });\r\n\r\n  //change Infinity back to real size:\r\n  packer.height = setup.heightAuto ? packer.minHeight : parseFloat( setup.height );\r\n  packer.width = setup.widthAuto ? packer.minWidth : parseFloat( setup.width );\r\n  return packer;\r\n};\r\n\r\n\r\n/**\r\n * Change priority of given item\r\n * @//param  {Item | Number | String} itemIndex    item/container id (by default the original item index in DOM), or item itself\r\n * @param  {Item} item    item to be re-prioritized\r\n * @param  {Boolean} increase  true - increases priority, false - decreases\r\n * @param  {Boolean} [end=false] true to move to the end\r\n * @return {juicy-tile-list}        self\r\n * @TODO write tests\r\n */\r\nPackage.prototype.reprioritizeItem =  function( item, increase, end ){\r\n  var higher, lower, item;\r\n  // if( typeof item !== 'object'){\r\n  //   item = this.items[item];\r\n  // }\r\n  var itemSetup = item;\r\n  // use parent items\r\n  var collection = item.container && item.container.items;\r\n  // do nothing for root\r\n  if( !collection ){\r\n    throw new RangeError( \"Cannot reprioritize root container\");\r\n    return false;\r\n  }\r\n  // do nothing if there is nothing to rearrange\r\n  if( collection.length < 2){\r\n    return this;\r\n  }\r\n  var sortedIndex = collection.indexOf( itemSetup );\r\n\r\n  // move to the end\r\n  if( end ||\r\n      increase && (sortedIndex <= 1) ||\r\n      !increase && (sortedIndex >= collection.length - 2 )\r\n  ){\r\n      // top\r\n      if(increase){\r\n          // already on top\r\n          if(itemSetup.priority == 1){\r\n              return this;\r\n          }\r\n          higher = collection[0];\r\n          // already there, but with different priority\r\n          if(higher == item){\r\n              itemSetup.priority = 1;\r\n              // do not rearrange\r\n              return this;\r\n          } else {\r\n              // move to the middle\r\n              higher.priority = (collection[1].priority + 1)/2;\r\n              itemSetup.priority = 1;\r\n          }\r\n      } else { // bottom\r\n          // already at the bottom\r\n          if(itemSetup.priority == 0){\r\n              return this;\r\n          }\r\n          lower = collection[collection.length -1 ];\r\n          // already there, but with different priority.\r\n          if(lower == item){\r\n              itemSetup.priority = 0;\r\n              return this;\r\n          } else {\r\n              // move to the middle\r\n              lower.priority = collection[collection.length -2].priority/2;\r\n              itemSetup.priority = 0;\r\n          }\r\n\r\n      }\r\n  } else {\r\n      // top\r\n      if(increase){\r\n          higher = collection[sortedIndex-2];\r\n          lower = collection[sortedIndex-1];\r\n      } else {\r\n          higher = collection[sortedIndex+1];\r\n          lower = collection[sortedIndex+2];\r\n      }\r\n      itemSetup.priority = (higher.priority + lower.priority)/2;\r\n  }\r\n\r\n  // TODO only this scope\r\n  this.packItems( );\r\n  return this;\r\n};\r\n\r\n/**\r\n * Resize given item.\r\n * @//param  {SetupItemRef} item   item from list, or item id (by default the original item index in DOM)\r\n * @param  {SetupItemRef} item   item from list\r\n * @param  {Number} width  number of cells/columns\r\n * @param  {Number} height number of cells/rows\r\n * @return {juicy-tile-list}        self\r\n */\r\nPackage.prototype.resizeItem = function(item, width, height){\r\n  // if(typeof item !== 'object'){\r\n  //     item = this.items[item];\r\n  // }\r\n  item.width = width;\r\n  item.height = height;\r\n  // re-pack only applicable branch\r\n  // this.packItems( item.container, item.container.packer );\r\n  // re-pack everthing\r\n  this.packItems();\r\n\r\n  return this;\r\n};\r\n/**\r\n * \r\n * @//param  {SetupItemRef | String} what item reference or id\r\n * @param  {SetupItemRef} what item reference\r\n * @//param  {SetupItemRef} [where]    Reference to, or id of destination container.    If id given in *string* is not found in existing containers list, new one will be created and wrapped around given item.\r\n * @param  {SetupItemRef} [where]    Reference to destination container.\r\n * @param {Boolean} [noPacking=false]\r\n * @return {[type]}              [description]\r\n */\r\nPackage.prototype.moveToContainer = function( what, where, noPacking ){\r\n  // if( typeof what !== \"object\" ){\r\n  //   what = this.items[what];\r\n  // }\r\n  var from = what.container && what.container.items;\r\n  // do nothing for root\r\n  if( !from ){\r\n    throw new RangeError( \"Cannot move root container\");\r\n    return false;\r\n  }\r\n  var to;\r\n  // if( typeof where === \"string\" ){\r\n  //   // container given by key\r\n  //   where = this.items[where] || \r\n  //   // or new one\r\n  //           this.createNewContainer(where, from, what, true);\r\n  // }\r\n  to = where.items;\r\n  // origin == destination\r\n  if( from == to ){\r\n    return false;\r\n  }\r\n\r\n  from.splice( from.indexOf(what), 1);\r\n  what.container = where;\r\n  to.push(what);\r\n\r\n  if(!noPacking){\r\n    //TODO: repack only applicable ones\r\n    this.packItems();\r\n  }\r\n\r\n};\r\n/**\r\n * Delete virtual container, move items (if any) to one above.\r\n * @//param  {Item | String} what        Reference to, or id of the container to delete.\r\n * @param  {Item} what        Reference to the container to delete.\r\n * @param  {Boolean} [noRepacking=false]  `true` to prevent  re-packing after setup change.\r\n * @return {Object}             deleted item\r\n */\r\nPackage.prototype.deleteContainer = function( what, noRepacking ){\r\n  // if( typeof what === \"string\" ){\r\n  //   what = this.items[what];\r\n  // }\r\n  if( what.items === undefined ){\r\n    throw new RangeError( \"Cannot delete real element\");\r\n  }\r\n  var container = what.container;\r\n  if( what.id == \"root\" || !container ){\r\n    throw new RangeError( \"Cannot delete root container\");\r\n  }\r\n  // cache some stuff;\r\n  var siblingsList = container.items;\r\n  // move all items to container above\r\n  var itemNo = what.items.length;\r\n  while( itemNo-- ){\r\n    // XXX do batch move (tomalec)\r\n    // XXX keep items list in item object\r\n    this.moveToContainer( what.items[itemNo], container, true);\r\n  }\r\n\r\n  // remove setup\r\n  var removed = siblingsList.splice( siblingsList.indexOf(what), 1)[0];\r\n  // remove item\r\n  delete this.allItems[what.id];\r\n\r\n\r\n  if(!noRepacking){\r\n    //TODO: repack only applicable ones\r\n    this.packItems();\r\n  }\r\n  return removed;\r\n};\r\n/**\r\n * Create a unique id for a container\r\n * @param {Object} parent container\r\n * @return {String}\r\n */\r\nPackage.prototype.generatePackageName = function (container) {\r\n  var i = 0;\r\n  while (this.allItems[container.id + '_' + i]) {\r\n    i++;\r\n  }\r\n  return container.id + '_' + i;\r\n};\r\n/**\r\n * Create new empty virtual container.\r\n * @param  {String} id        Id for the container. If empty, a unique id will be generated\r\n * @//param  {Item | String} [inContainer=\"root\"] Container item or id\r\n * @param  {Item} [inContainer=root container] Container item\r\n * @param  {Rectangle} [rectangle]   rectangle setup (width, height, priority)\r\n * @param  {Boolean} [noRepacking=false] `true` block re-packing items after setup change\r\n * @return {item}             created container\r\n */\r\nPackage.prototype.createNewContainer = function( id, inContainer, rectangle, noRepacking ){\r\n  // if( typeof inContainer === \"string\" ){\r\n  //   inContainer = this.items[inContainer];\r\n  // } else {\r\n    inContainer = inContainer || this.setup;\r\n  // }\r\n  // cache smth\r\n\r\n  if (!id) {\r\n    id = this.generatePackageName(inContainer);\r\n  }\r\n\r\n  var siblings = inContainer.items;\r\n\r\n////-----------------\r\n  var setup = {\r\n      gutter: 0,\r\n      items: [],\r\n      id: id,\r\n      priority: rectangle ? rectangle.priority : getMinimumPriority(siblings)/2,\r\n      width: rectangle && rectangle.width || 0,  // consider use of this.defaultTileSetup\r\n      height: rectangle && rectangle.height || 0 // consider use of this.defaultTileSetup\r\n  };\r\n  this.allItems[ id ] = setup;\r\n  // \r\n  // XXX: setter?\r\n  Object.defineProperty(setup, \"container\", { value: inContainer, writable: true });\r\n\r\n  siblings.push(setup);\r\n\r\n  if(!noRepacking){\r\n    //TODO: repack only applicable ones\r\n    this.packItems();\r\n  }\r\n  return setup;\r\n};\r\n\r\n\r\n// TODO: export\r\nscope.Package = Package;\r\n\r\n}(window, Packer));\r\n"]}